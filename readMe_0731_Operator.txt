[변수]

폴더명 =>
D:\ResWeb\200528\silsp\part03_JS\JS02_Variable
파일명 => silsp.html
JS코드위치 => 내부JS(=Inner JS)

1. 변수 정의(=변수 만들기)
  var 변수명;
2. 변수 초기화(=변수에 값 대입)
   변수명 = 값;
3. 변수 재초기화(=변수에 기존 값 제거 후
                      새로운 값 대입)
   변수명 = 값;
4. 변수의 사용
   출력, 계산(=연산), 전송 등등
   alert(변수명);

----------------------
[변수명 규칙]
1. 이름 중간 공백안됨
2. 숫자 시작 안됨
3. 특수문자 $, _ 2개만 허용
4. 영어 대/소문자 구분
5. 예약어 안됨(=JS 에서 사용하는 코드)


[개발자도구에서 확인하는 오류메시지]
JS의 실행결과가 코드를 작성한 개발자의
의도와 다른 결과가 나타나거나 
정상실행되지 않을 때 =>
! JS의 오류메시지를 확인해야 한다.
(=디버거 참조, debugger, 
   오류를 해결할 수 있는 것이나 방법)

1. referenceError : 참조 오류
     => 해당하는 항목을 찾을 수 없을 때
2. syntaxError : 문법 오류
     => 코드 작성 방법이 잘못되었을 때
3. Unexpected token '오류가발생한코드'
     => 필요없는 코드거나 잘못작성된 코드이므로
           삭제 또는 수정을 요구함.
           token(토큰) : 코드 조각


참고. 오류가 발생하면 오류가 발생한 줄번호부터
       시작하여 그 아래쪽 소스코드는 실행안됨

-------------------------------------------
[JS 학습방법]
1. JS 가 실행되는 순서의 이해
 1) 값 입력
 2) 입력값을 사용하여 계산, 처리
 3) 계산 결과 또는 처리 결과를
     출력하거나 재사용

2. JS 코드 작성할 때 주의사항
 1) 대소문자 구분
 2) 세미콜론(;)을 프로그램실행코드 1줄마다 표기 
 3) 오타주의! => 디버깅 습관 또는
                      다른 개발자가 코드 확인
 4) 프로그램이 정상실행되지 않았을 경우
     => 디버깅 습관

 참고. 디버깅 => F12 기능키를 눌러서
                     개발자도구의 오류메시지를 
                     확인하는 것.(기타 제공되는 다른
                     방법이 있음)

--------------------------------------

[연산자, Operator, 오퍼레이터]
1. +, -, *, / => 산술연산자
  % => 나머지 연산
  보기.   17 / 5 => 3.4
           17 % 5 => 2
           (사과가 17개 있습니다.
            상자1개에 사과를 5개 담을 수 있습니다.
            몇 개의 상자가 필요하고 
            남은 사과의 개수는?

            필요한 상자 개수 => 몫 : 3
            남은 사과 => 나머지 : 2)

    ● % 연산자는 아래의 처리과정에서 필요함
       1) 홀수/짝수 구분
       => 2로 나눌 때 나머지가 0이면 짝수
            나머지가 1이면 홀수
       2) 성별 구분      
       => 주민번호 뒷자리부분의 첫번째 숫자를
             2로 나눌 때 나머지가 0이면 여자
             나머지가 1이면 남자 
       3) 약수 목록 산출
        => 1이상의 임의의 숫자를 지정하고
              1부터 임의의 숫자까지 1씩 증가하면서
              임의의 숫자를 나누었을 때
              나머지가 0이 나오는 숫자들의 집합

폴더명 =>
D:\ResWeb\200528\silsp\part03_JS\JS02_Operator
파일명 => silsp_01.html
JS코드위치 => 내부JS(=Inner JS)

2. +(연결연산자)
    => 덧셈을 하는 것이 아니라
          문자열(또는 문자)과 
          숫자(또는 변수)를 함께 연결하여
          출력할 수 있도록 만드는 연산자
  주의사항
  1) JS는 다음과 같은 자료형을 갖는다.
     (1) 숫자 : number 형
              숫자만 표시, 문자는 안됨
              2, 0, -4      1.3, 2.4, -6.7
                정수                실수
             Integer            Float 또는 Double
              인티저              플로트          더블
                      => 계산 목적, 따옴표 없음

     (2) 문자(열) : string 형
              숫자, 문자 모두 가능하지만
              반드시 따옴표(또는 홑따옴표)를
              함께 표시해야 함            
               string => 스트링, 출력/표현 목적
                         계산 목적 아님, 따옴표 또는
                         홑 따옴표 사용

     (3) 불리언 : boolean 형
               true, false  
              (반드시 소문자, 따옴표 표기 안됨)
            => 문맥 또는 내용이 논리적으로 
                  올바른가를 따진 결과를 표현
                  (말이 뜻이 맞느냐 틀리느냐만 표현)

     그 외 : undefined(언디파인드),
              object(객체, 오브젝트),
              NaN(넌, Not A Number, 
                      숫자가 아니다, 숫자로 표현 불가)
              Infinity(인피니티, 숫자는 맞지만
                          무한대의 결과를 의미하며
                          특정 숫자로 표현할 수 없음)
              null(널, 미입력상태를 의미)





   2) 연결연산자를 문자형과 함께 사용하면
       숫자형은 모두 문자형으로 자동변경된다.
       => 계산과 연결을 함께 사용할 때
             순서에 주의
       

   참고사항. 
   모든 컴퓨터 프로그램은 프로그램을 만드는
   개발자가 원하는 기능을 미리 만들어 두었다.

   ● 수동 자료형 변경
     (= 강제 자료형 변경, 
          자료형 캐스팅, 줄여서 캐스팅, casting)
     1) 정수형으로 변경
          var data1 = "7";
          parseInt(data1);   
          => data1의 값이 "7"에서 7로 
                자료형이 변경됨
     2) 실수형으로 변경
          var data1 = "7";
          parseFloat(data1);   
          => data1의 값이 "7"에서 7.0 으로 
                자료형이 변경됨
     3) 문자형으로 변경
          var data1 = 7;
          // 정정사항 toString(data1); 표기오류
          // 아래는 올바른 표기
          data1.toString();
          => data1의 값이 7에서 "7" 로 
                자료형이 변경됨

     주의. 숫자형으로 변경할 수 없는 문자형을
           parseInt() 또는 parseFloat()로
           변경하려하면 오류 발생
            var data1 = "가나다";
            parseInt(data1);   // 오류발생 

     ● html 또는 js에서 입력받는 모든 값들은
        무조건 문자자료형이 지정된다.
        1) html입력
            <input type="text">
             => 입력값이 JS에서는 string자료형임.
     
        2) 요소의 text 값입력
            <시작태그>내용</종료태그>
                          위의 내용이 text가 된다.
         
        3) prompt(); 에서의 값입력


파일명 : silsp_End.html



                  




    ● 자료형 = data type
    컴퓨터 내부의 전기신호 구조가 동일하기
    때문에 동일한 입력신호를 구분하고자 사용함
    => 전기신호를 효율적으로 사용하기 위함

     var code1 = 65;   
        // 변수 code1은 숫자 65
        // => 전기신호 구조가
        // 65 번째라는 의미
     var code2 = "A";  
        // 변수 code2는 문자 A
        // => 전기신호 구조가
        // 65 번째라는 의미

       전기신호 구조(1byte 기준)
       xOxxxxxO   => 65
          1*2^6   +   1*2^0
     =>   64      +      1
     => 아스키코드 표

-----------------------------------------

[불리언 자료형]
값 : true, false
=> silsp_Boolean.html

● 산술 연산자 : +, -, *, /, % (숫자들의 계산)
● 연결 연산자 : + (문자열들의 연결)
● 3항 연산자
  (= 삼항 연산자,
       조건 연산자) :    ?    :
                       (물음표와 콜론 2개를
                         1개의 연산자로 사용함)
  사용법 =>  조건식  ?  true일 때 : false일 때;
                   
   조건식은  크다, 크거나 같다, 작다, 작거나 같다,
              같다, 다르다 를 판단할 수 있는 연산자가
              포함된 식
    조건식에 사용되는 연산자            틀린 표기법
    1) 크다           >      
    2) 크거나 같다   >=                 =>
    3) 작다           <
    4) 작거나 같다   <=                 =<
    5) 같다           ==
    6) 다르다         !=                   =!

     조건식의 결과는 항상 true 또는 false만 출력됨.

 
                                             보기           
     ++, --     => 1항 연산자       var a = 2;
                         단항 연산자      a++;
                                          1항 연산자; 
   
     +, -, / ... => 2항 연산자  2     +    3
                                      1항 연산자 2항

     ?     :      => 3항 연산자
                         조건식 ?   true   :  false;
                           1항        2항        3항
                                연산자      연산자
                 

        
        // 3항 연산자(= 조건 연산자) 
        //   형식 =>          ?              :
        //               조건식 ? true일 때 결과 : false일 때 결과;

        // 조건을 따져보고 결과가 true 이면 첫 번째 영역만 남아서
        // 실행되고 나머지는 모두 사라짐        
        // 조건을 따져보고 결과가 false 이면 두 번째 영역만 남아서
        // 실행되고 나머지는 모두 사라짐
        // =>     조건식 ? 첫번째영역 : 두번째영역;














          



    
    











